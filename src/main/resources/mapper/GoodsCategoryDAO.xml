<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.jxufe.shopping.mapper.GoodsCategoryDAO">
    <resultMap id="BaseResultMap" type="cn.edu.jxufe.shopping.entity.GoodsCategory">
        <id column="cat_id" jdbcType="INTEGER" property="catId"/>
        <result column="cat_name" jdbcType="VARCHAR" property="catName"/>
        <result column="sort" jdbcType="INTEGER" property="sort"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="is_offline" jdbcType="INTEGER" property="isOffline"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    cat_id, cat_name, sort, description, is_offline, created_time, updated_time
  </sql>
    <select id="selectByExample" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategoryExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from goods_category
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from goods_category
        where cat_id = #{catId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods_category
    where cat_id = #{catId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategoryExample">
        delete from goods_category
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategory">
    insert into goods_category (cat_id, cat_name, sort, 
      description, is_offline, created_time, 
      updated_time)
    values (#{catId,jdbcType=INTEGER}, #{catName,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER}, 
      #{description,jdbcType=VARCHAR}, #{isOffline,jdbcType=INTEGER}, #{createdTime,jdbcType=TIMESTAMP}, 
      #{updatedTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategory">
        insert into goods_category
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="catId != null">
                cat_id,
            </if>
            <if test="catName != null">
                cat_name,
            </if>
            <if test="sort != null">
                sort,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="isOffline != null">
                is_offline,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="updatedTime != null">
                updated_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="catId != null">
                #{catId,jdbcType=INTEGER},
            </if>
            <if test="catName != null">
                #{catName,jdbcType=VARCHAR},
            </if>
            <if test="sort != null">
                #{sort,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="isOffline != null">
                #{isOffline,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedTime != null">
                #{updatedTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategoryExample"
            resultType="java.lang.Long">
        select count(*) from goods_category
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update goods_category
        <set>
            <if test="record.catId != null">
                cat_id = #{record.catId,jdbcType=INTEGER},
            </if>
            <if test="record.catName != null">
                cat_name = #{record.catName,jdbcType=VARCHAR},
            </if>
            <if test="record.sort != null">
                sort = #{record.sort,jdbcType=INTEGER},
            </if>
            <if test="record.description != null">
                description = #{record.description,jdbcType=VARCHAR},
            </if>
            <if test="record.isOffline != null">
                is_offline = #{record.isOffline,jdbcType=INTEGER},
            </if>
            <if test="record.createdTime != null">
                created_time = #{record.createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatedTime != null">
                updated_time = #{record.updatedTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update goods_category
        set cat_id = #{record.catId,jdbcType=INTEGER},
        cat_name = #{record.catName,jdbcType=VARCHAR},
        sort = #{record.sort,jdbcType=INTEGER},
        description = #{record.description,jdbcType=VARCHAR},
        is_offline = #{record.isOffline,jdbcType=INTEGER},
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
        updated_time = #{record.updatedTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategory">
        update goods_category
        <set>
            <if test="catName != null">
                cat_name = #{catName,jdbcType=VARCHAR},
            </if>
            <if test="sort != null">
                sort = #{sort,jdbcType=INTEGER},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="isOffline != null">
                is_offline = #{isOffline,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where cat_id = #{catId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategory">
    update goods_category
    set cat_name = #{catName,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      is_offline = #{isOffline,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP}
    where cat_id = #{catId,jdbcType=INTEGER}
  </update>

    <select id="findByCondition" parameterType="cn.edu.jxufe.shopping.entity.GoodsCategory" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from goods_category
        <where>
            <if test="catName != null">
                or cat_name like concat('%',#{catName,jdbcType=VARCHAR},'%')
            </if>
            <if test="sort != null">
                or sort like concat('%',#{sort,jdbcType=INTEGER},'%')
            </if>
            <if test="description != null">
                or description like concat('%',#{description,jdbcType=VARCHAR},'%')
            </if>
            <if test="isOffline != null">
                or is_offline like concat('%',#{isOffline,jdbcType=INTEGER},'%')
            </if>
            <if test="createdTime != null">
                or created_time like concat('%',#{createdTime,jdbcType=TIMESTAMP},'%')
            </if>
            <if test="updatedTime != null">
                or updated_time like concat('%',#{updatedTime,jdbcType=TIMESTAMP},'%')
            </if>
        </where>
    </select>
</mapper>